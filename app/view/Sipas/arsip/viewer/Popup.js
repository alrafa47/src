/*
 * File: app/view/Sipas/arsip/viewer/Popup.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIPAS.view.Sipas.arsip.viewer.Popup', {
    extend: 'Ext.window.Window',
    alias: 'widget.sipas_arsip_viewer_popup',

    requires: [
        'SIPAS.view.Sipas.arsip.Dataview',
        'SIPAS.view.Sipas.com.button.Refresh',
        'SIPAS.view.Sipas.com.button.Print',
        'SIPAS.view.Sipas.com.button.Download',
        'SIPAS.view.Sipas.com.button.Zoom',
        'SIPAS.view.Sipas.com.button.Zoomin',
        'SIPAS.view.Sipas.com.button.Zoomout',
        'SIPAS.view.Sipas.com.Iframe',
        'Ext.panel.Panel',
        'Ext.view.View',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.TextItem'
    ],

    enableReload: true,
    enablePrint: true,
    cls: 'sipas_viewer',
    layout: 'border',
    title: 'Preview Berkas',
    maximizable: true,
    maximized: true,

    initComponent: function() {
        var me = this;

        me.addEvents(
            'load',
            'print',
            'download',
            'zoom',
            'zoomin',
            'zoomout'
        );

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    region: 'west',
                    split: true,
                    border: false,
                    width: 170,
                    layout: 'fit',
                    items: [
                        {
                            xtype: 'sipas_arsip_dataview'
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    flex: 8,
                    region: 'center',
                    border: false,
                    header: false,
                    title: 'My Panel',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            itemId: 'toolbarControl',
                            items: [
                                me.processButtonRefresh({
                                    xtype: 'sipas_com_button_refresh',
                                    listeners: {
                                        click: {
                                            fn: me.onReload,
                                            scope: me
                                        }
                                    }
                                }),
                                me.processButtonPrint({
                                    xtype: 'sipas_com_button_print',
                                    listeners: {
                                        click: {
                                            fn: me.onPrint,
                                            scope: me
                                        }
                                    }
                                }),
                                me.processButtonDownload({
                                    xtype: 'sipas_com_button_download',
                                    listeners: {
                                        click: {
                                            fn: me.onDownload,
                                            scope: me
                                        }
                                    }
                                }),
                                me.processButtonZoom({
                                    xtype: 'sipas_com_button_zoom',
                                    listeners: {
                                        click: {
                                            fn: me.onZoom,
                                            scope: me
                                        }
                                    }
                                }),
                                me.processButtonZoomin({
                                    xtype: 'sipas_com_button_zoomin',
                                    listeners: {
                                        click: {
                                            fn: me.onZoomIn,
                                            scope: me
                                        }
                                    }
                                }),
                                me.processButtonZoomout({
                                    xtype: 'sipas_com_button_zoomout',
                                    listeners: {
                                        click: {
                                            fn: me.onZoomOut,
                                            scope: me
                                        }
                                    }
                                })
                            ]
                        },
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            itemId: 'toolbarInfo',
                            items: [
                                {
                                    xtype: 'tbtext',
                                    text: '<i class="icon ion-md-information-circled"></i>'
                                },
                                {
                                    xtype: 'tbtext',
                                    itemId: 'nama'
                                },
                                {
                                    xtype: 'tbtext',
                                    itemId: 'size'
                                },
                                {
                                    xtype: 'tbtext',
                                    itemId: 'date'
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'sipas_com_iframe',
                            itemId: 'iframe',
                            defaultAlign: 'center'
                        }
                    ]
                }
            ]
        });

        me.processSipasViewer(me);
        me.callParent(arguments);
    },

    processButtonRefresh: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableReload
        });
    },

    processButtonPrint: function(config) {
        return Ext.apply(config,{
            hidden: !this.enablePrint
        });
    },

    processButtonDownload: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableDownload
        });
    },

    processButtonZoom: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableZoom
        });
    },

    processButtonZoomin: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableZoom
        });
    },

    processButtonZoomout: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableZoom
        });
    },

    processSipasViewer: function(config) {
        Ext.applyIf(config,{
            downloadUrl: config && config.url
        },{});
        return config;
    },

    onReload: function(button, e, eOpts) {
        this.reload();
    },

    onPrint: function(button, e, eOpts) {
        this.print();
    },

    onDownload: function(button, e, eOpts) {
        this.download();
    },

    onZoom: function(button, e, eOpts) {
        this.zoom();
    },

    onZoomIn: function(button, e, eOpts) {
        this.zoomIn();
    },

    onZoomOut: function(button, e, eOpts) {
        this.zoomOut();
    },

    getFrame: function() {
        return this.down('#iframe');
    },

    load: function(url, callback, scope) {
        var me = this;
        if(!this.rendered) {
            this.url = url;
            return;
        }
        this.getFrame().load(url, function(){
            this.fireEventArgs('load',[me]);
            Ext.callback(callback, scope, [me]);
        }, this);
        return this;
    },

    reload: function(callback, scope) {
        return this.load(this.url, callback, scope);
    },

    print: function() {
        this.getFrame().print();
        this.fireEvent('print',this);
    },

    download: function() {
        this.getFrame().getWindow().location.assign(this.downloadUrl);
        this.fireEvent('download',this,this.downloadUrl);
    },

    zoom: function(value) {
        this.getFrame().zoom(value);
        this.fireEvent('zoom', this, this.getFrame().zoomState);
    },

    zoomIn: function(increase) {
        this.getFrame().zoomIn(increase);
        this.fireEvent('zoomin', this, this.getFrame().zoomState);
    },

    zoomOut: function(decrease) {
        this.getFrame().zoomIn(decrease);
        this.fireEvent('zoomout', this, this.getFrame().zoomState);
    }

});