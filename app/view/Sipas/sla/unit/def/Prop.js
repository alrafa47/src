/*
 * File: app/view/Sipas/sla/unit/def/Prop.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIPAS.view.Sipas.sla.unit.def.Prop', {
    extend: 'Ext.window.Window',
    alias: 'widget.sipas_sla_unit_def_prop',

    requires: [
        'SIPAS.view.Sipas.com.button.Refresh',
        'Ext.grid.Panel',
        'Ext.button.Button',
        'Ext.grid.RowNumberer',
        'Ext.selection.RowModel',
        'Ext.toolbar.Paging'
    ],

    languageable: true,
    languageCode: 'sla_unit_default_list',
    languageMode: 'title',
    height: 444,
    width: 697,
    resizable: false,
    layout: 'fit',
    maximizable: true,
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                me.processSipasslaunitdefaultList({
                    xtype: 'gridpanel',
                    genAktif: function(value, aktif) {
                        if(!aktif){
                            return '<span class="alternative">'+value+'</span>';
                        }else{
                            return value;
                        }
                    },
                    clickToView: true,
                    itemId: 'listSLAunitdefault',
                    allowDeselect: true,
                    columnLines: false,
                    disableSelection: true,
                    emptyText: 'Tidak ada Data',
                    store: 'Sipas.sla.unit.def.List',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            itemId: 'toolbarProperties',
                            layout: {
                                type: 'hbox',
                                defaultMargins: {
                                    top: 4,
                                    right: 4,
                                    bottom: 6,
                                    left: 4
                                }
                            },
                            items: [
                                {
                                    xtype: 'sipas_com_button_refresh'
                                }
                            ]
                        },
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'Sipas.sla.unit.def.List'
                        }
                    ],
                    columns: [
                        {
                            xtype: 'rownumberer'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var aktif = record.get('unit_nama');

                                if(value){
                                    return this.genAktif(value, aktif);
                                }else{
                                    return "<span class='alternative'>-</span>";
                                }
                            },
                            filterable: true,
                            items: {
                                xtype: 'textfield',
                                flex: 1,
                                margin: 2,
                                listeners: {
                                    change: function(textfield, e, eOpts){
                                this.up('gridpanel').filterHeader(this);
                                }
                                }
                            },
                            width: 320,
                            sortable: true,
                            dataIndex: 'unit_nama',
                            text: 'Nama Unit',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var aktif = record.get('sla_nama');

                                if(value){
                                    return this.genAktif(value, aktif);
                                }else{
                                    return "<span class='alternative'>-</span>";
                                }
                            },
                            filterable: true,
                            items: {
                                xtype: 'textfield',
                                flex: 1,
                                margin: 2,
                                listeners: {
                                    change: function(textfield, e, eOpts){
                                this.up('gridpanel').filterHeader(this);
                                }
                                }
                            },
                            width: 320,
                            sortable: true,
                            dataIndex: 'sla_nama',
                            text: 'Default SLA',
                            flex: 1
                        }
                    ],
                    selModel: Ext.create('Ext.selection.RowModel', {

                    })
                })
            ]
        });

        me.callParent(arguments);
    },

    processSipasslaunitdefaultList: function(config) {
        var filters = {
            ftype: 'filters',
            encode: true,
            local: false
        };

        if (! config.features) {
            config.features=filters;
        } else {
            config.features.push(filters);
        }

        return config;
    }

});