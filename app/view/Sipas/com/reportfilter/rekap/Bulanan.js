/*
 * File: app/view/Sipas/com/reportfilter/rekap/Bulanan.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIPAS.view.Sipas.com.reportfilter.rekap.Bulanan', {
    extend: 'Ext.form.FieldContainer',
    alias: 'widget.sipas_com_reportfilter_rekap_bulanan',

    requires: [
        'SIPAS.view.Sipas.com.form.field.Month',
        'Ext.form.field.Checkbox',
        'Ext.form.field.ComboBox',
        'Ext.view.BoundList',
        'Ext.XTemplate',
        'Ext.form.field.Date',
        'Ext.button.Button'
    ],

    filterDate: 'Pada Tanggal',
    filterYear: 'Pada Tahun',
    filterMonth: 'Pada Bulan',
    filterDateRange: 'Rentang Tanggal',
    filterAfterDate: 'Setelah Tanggal',
    filterBeforeDate: 'Sebelum Tanggal',
    fieldLabel: '',

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        me.addEvents(
            'process'
        );

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'checkboxfield',
                    margins: '0 4 0 0',
                    hidden: true,
                    itemId: 'checkboxFilter',
                    fieldLabel: '',
                    name: 'filter',
                    boxLabel: 'Filter',
                    boxLabelAlign: 'before',
                    listeners: {
                        change: {
                            fn: me.onCheckboxFilterChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    flex: 1,
                    hidden: true,
                    itemId: 'comboTipe',
                    margin: '0 5 0 0',
                    fieldLabel: 'Tipe',
                    hideLabel: true,
                    labelWidth: 60,
                    name: 'surat_tipe',
                    emptyText: 'Pilih Jenis Surat',
                    hideTrigger: true,
                    anyMatch: true,
                    displayField: 'surat_nama',
                    forceSelection: true,
                    queryMode: 'local',
                    store: 'Sipas.surat.tipe.Combo',
                    valueField: 'surat_tipe'
                },
                {
                    xtype: 'combobox',
                    bootstrapProperty: 'Sipas.unit.Prop',
                    flex: 1,
                    itemId: 'comboUnit',
                    fieldLabel: 'Unit Kerja',
                    labelWidth: 60,
                    name: 'staf_unit',
                    emptyText: 'Pilih Unit Kerja',
                    matchFieldWidth: false,
                    displayField: 'unit_nama',
                    minChars: 2,
                    pageSize: 15,
                    store: 'Sipas.unit.Combo',
                    typeAhead: true,
                    valueField: 'unit_id',
                    listConfig: {
                        xtype: 'boundlist',
                        itemSelector: 'div',
                        itemTpl: [
                            '{unit_nama} ({unit_kode})'
                        ]
                    }
                },
                {
                    xtype: 'combobox',
                    flex: 1,
                    itemId: 'comboFilter',
                    fieldLabel: '',
                    hideLabel: true,
                    emptyText: 'Pilih Rentang Waktu',
                    editable: false,
                    displayField: 'display',
                    store: [
                        [
                            'month',
                            this.filterMonth
                        ]
                    ],
                    valueField: 'value',
                    listeners: {
                        select: {
                            fn: me.onComboFilterSelect,
                            scope: me
                        }
                    }
                },
                me.processDatefieldMonth({
                    xtype: 'sipas_com_form_field_month',
                    hidden: true,
                    itemId: 'datefieldMonth',
                    width: 120,
                    labelAlign: 'right',
                    emptyText: 'Bulan',
                    editable: false,
                    flex: 1
                }),
                me.processButtonProcess({
                    xtype: 'button',
                    flex: 1,
                    cls: 'extrasmall',
                    itemId: 'buttonProcess',
                    margin: '0 0 0 5',
                    text: '<b>PROSES</b>',
                    listeners: {
                        click: {
                            fn: me.onButtonProcessClick,
                            scope: me
                        }
                    }
                })
            ]
        });

        me.callParent(arguments);
    },

    processDatefieldMonth: function(config) {
        var me = this;
        return Ext.apply(config, me.filterMonthConfig);
    },

    processButtonProcess: function(config) {
        var me = this;
        return Ext.apply(config, me.filterProcessConfig);
    },

    onCheckboxFilterChange: function(field, newValue, oldValue, eOpts) {
        field.next('#comboFilter').setDisabled(oldValue);
        field.next('#comboUnit').setDisabled(oldValue);
        this.setFiltered(newValue);
    },

    onComboFilterSelect: function(combo, records, eOpts) {
        var me = this;
        me.setFilter(records[0] && records[0].get('field1') );
    },

    onButtonProcessClick: function(button, e, eOpts) {

        this.fireEventArgs('process',[this,this.getFilter(), this.getValue(), e, eOpts]);
    },

    isFiltered: function() {
        return this.down('#checkboxFilter').getValue();
    },

    getFilter: function() {
        return this.down('#comboFilter').getValue();
    },

    setFilter: function(filter) {
        this.down('#comboFilter').setValue(filter);

        var me = this,
        	cmpMonth = me.down('#datefieldMonth');

        switch(filter){
        	case 'month': cmpMonth.show(); break;
        }
    },

    setValue: function(value) {
        var me = this,
        	cmpMonth = me.down('#datefieldMonth');

        switch(me.getFilter()){
        	case 'month': return cmpMonth.setValue(value);
        }
    },

    getValue: function() {
        var me = this,
        	cmpMonth = me.down('#datefieldMonth');

        switch(me.getFilter()){
        	case 'month': return Ext.util.Format.date(cmpMonth.getValue(), cmpMonth.submitFormat);
        }
    },

    setFiltered: function(filtered) {
        if(!filtered){
            this.setFilter(null);
        }
    }

});