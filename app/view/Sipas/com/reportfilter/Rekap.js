/*
 * File: app/view/Sipas/com/reportfilter/Rekap.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIPAS.view.Sipas.com.reportfilter.Rekap', {
    extend: 'Ext.form.FieldContainer',
    alias: 'widget.sipas_com_reportfilter_rekap',

    requires: [
        'SIPAS.view.Sipas.com.form.field.Month',
        'SIPAS.view.Sipas.com.button.Minus',
        'Ext.form.field.Checkbox',
        'Ext.form.field.ComboBox',
        'Ext.view.BoundList',
        'Ext.XTemplate',
        'Ext.form.field.Date',
        'Ext.form.field.Number',
        'Ext.form.FieldContainer',
        'Ext.button.Button'
    ],

    filterDate: 'Pada Tanggal',
    filterYear: 'Pada Tahun',
    filterMonth: 'Pada Bulan',
    filterDateRange: 'Rentang Tanggal',
    filterAfterDate: 'Setelah Tanggal',
    filterBeforeDate: 'Sebelum Tanggal',
    fieldLabel: '',

    layout: {
        type: 'hbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        me.addEvents(
            'process'
        );

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'checkboxfield',
                    margins: '0 4 0 0',
                    hidden: true,
                    itemId: 'checkboxFilter',
                    fieldLabel: '',
                    name: 'filter',
                    boxLabel: 'Filter',
                    boxLabelAlign: 'before',
                    listeners: {
                        change: {
                            fn: me.onCheckboxFilterChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    flex: 1,
                    hidden: true,
                    itemId: 'comboTipe',
                    margin: '0 5 0 0',
                    fieldLabel: 'Tipe',
                    hideLabel: true,
                    labelWidth: 60,
                    name: 'surat_tipe',
                    emptyText: 'Pilih Jenis Surat',
                    hideTrigger: true,
                    anyMatch: true,
                    displayField: 'surat_nama',
                    forceSelection: true,
                    queryMode: 'local',
                    store: 'Sipas.surat.tipe.Combo',
                    valueField: 'surat_tipe'
                },
                {
                    xtype: 'combobox',
                    bootstrapProperty: 'Sipas.unit.Prop',
                    flex: 1,
                    itemId: 'comboUnit',
                    fieldLabel: 'Unit Kerja',
                    labelWidth: 60,
                    name: 'staf_unit',
                    emptyText: 'Pilih Unit Kerja',
                    matchFieldWidth: false,
                    displayField: 'unit_nama',
                    minChars: 2,
                    pageSize: 15,
                    store: 'Sipas.unit.Combo',
                    typeAhead: true,
                    valueField: 'unit_id',
                    listConfig: {
                        xtype: 'boundlist',
                        itemSelector: 'div',
                        itemTpl: [
                            '{unit_nama} <span style="color: gray">({unit_kode})</span>'
                        ]
                    }
                },
                {
                    xtype: 'combobox',
                    bootstrapProperty: 'Sipas.unit.Prop',
                    flex: 1,
                    disabled: true,
                    itemId: 'comboBagian',
                    fieldLabel: 'Unit Bagian',
                    labelWidth: 60,
                    name: 'staf_unit',
                    emptyText: 'Pilih Unit Kerja',
                    matchFieldWidth: false,
                    displayField: 'unit_nama',
                    minChars: 2,
                    pageSize: 15,
                    store: 'Sipas.unit.ComboBagian',
                    typeAhead: true,
                    valueField: 'unit_id',
                    listConfig: {
                        xtype: 'boundlist',
                        itemSelector: 'div',
                        itemTpl: [
                            '{unit_nama} <span style="color: gray">({unit_kode})</span>'
                        ]
                    }
                },
                {
                    xtype: 'combobox',
                    flex: 1,
                    itemId: 'comboFilter',
                    fieldLabel: '',
                    hideLabel: true,
                    emptyText: 'Pilih Rentang Waktu',
                    editable: false,
                    displayField: 'display',
                    store: [
                        [
                            'date',
                            this.filterDate
                        ],
                        [
                            'daterange',
                            this.filterDateRange
                        ],
                        [
                            'beforedate',
                            this.filterBeforeDate
                        ],
                        [
                            'afterdate',
                            this.filterAfterDate
                        ],
                        [
                            'month',
                            this.filterMonth
                        ],
                        [
                            'year',
                            this.filterYear
                        ]
                    ],
                    valueField: 'value',
                    listeners: {
                        select: {
                            fn: me.onComboFilterSelect,
                            scope: me
                        }
                    }
                },
                me.processDatefieldDate({
                    xtype: 'datefield',
                    flex: 1,
                    hidden: true,
                    itemId: 'datefieldDate',
                    width: 120,
                    hideLabel: true,
                    labelAlign: 'right',
                    emptyText: 'Tanggal',
                    editable: false,
                    format: 'd-m-Y',
                    submitFormat: 'Y-m-d'
                }),
                me.processTextfieldYear({
                    xtype: 'numberfield',
                    flex: 1,
                    hidden: true,
                    itemId: 'textfieldYear',
                    hideLabel: true,
                    labelAlign: 'right',
                    emptyText: 'Tahun',
                    hideTrigger: true,
                    allowDecimals: false,
                    allowExponential: false,
                    minValue: 0
                }),
                me.processDatefieldBeforeDate({
                    xtype: 'datefield',
                    flex: 1,
                    hidden: true,
                    itemId: 'datefieldBeforeDate',
                    width: 120,
                    hideLabel: true,
                    labelAlign: 'right',
                    emptyText: 'Sebelum Tanggal',
                    editable: false,
                    format: 'd-m-Y',
                    submitFormat: 'Y-m-d'
                }),
                me.processDatefieldAfterDate({
                    xtype: 'datefield',
                    flex: 1,
                    hidden: true,
                    itemId: 'datefieldAfterDate',
                    width: 120,
                    hideLabel: true,
                    labelAlign: 'right',
                    emptyText: 'Setelah Tanggal',
                    editable: false,
                    format: 'd-m-Y',
                    submitFormat: 'Y-m-d'
                }),
                {
                    xtype: 'fieldcontainer',
                    hidden: true,
                    itemId: 'containerDateRange',
                    hideLabel: true,
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        me.processDatefieldStart({
                            xtype: 'datefield',
                            itemId: 'datefieldStart',
                            width: 120,
                            hideLabel: true,
                            labelAlign: 'right',
                            emptyText: 'Tanggal Mulai',
                            editable: false,
                            format: 'd-m-Y',
                            submitFormat: 'Y-m-d'
                        }),
                        me.processDatefieldEnd({
                            xtype: 'datefield',
                            itemId: 'datefieldEnd',
                            width: 120,
                            hideLabel: true,
                            labelAlign: 'right',
                            emptyText: 'Tanggal Selesai',
                            editable: false,
                            format: 'd-m-Y',
                            submitFormat: 'Y-m-d'
                        })
                    ]
                },
                me.processDatefieldMonth({
                    xtype: 'sipas_com_form_field_month',
                    hidden: true,
                    itemId: 'datefieldMonth',
                    width: 120,
                    labelAlign: 'right',
                    emptyText: 'Bulan',
                    editable: false,
                    flex: 1
                }),
                {
                    xtype: 'sipas_com_button_minus',
                    ui: 'default-toolbar',
                    listeners: {
                        click: {
                            fn: me.onButtonClick,
                            scope: me
                        }
                    }
                },
                me.processButtonProcess({
                    xtype: 'button',
                    flex: 1,
                    itemId: 'buttonProcess',
                    margin: '0 0 0 5',
                    text: '<b>PROSES</b>',
                    listeners: {
                        click: {
                            fn: me.onButtonProcessClick,
                            scope: me
                        }
                    }
                })
            ]
        });

        me.callParent(arguments);
    },

    processDatefieldDate: function(config) {
        var me = this;
        return Ext.apply(config, me.filterDateConfig);
    },

    processTextfieldYear: function(config) {
                var me = this;
                return Ext.apply(config, me.filterYearConfig);
    },

    processDatefieldBeforeDate: function(config) {
                var me = this;
                return Ext.apply(config, me.filterBeforeDateConfig);
    },

    processDatefieldAfterDate: function(config) {
                var me = this;
                return Ext.apply(config, me.filterAfterDateConfig);
    },

    processDatefieldStart: function(config) {
                var me = this;
                return Ext.apply(config, me.filterDateRangeStartConfig);
    },

    processDatefieldEnd: function(config) {
                var me = this;
                return Ext.apply(config, me.filterDateRangeEndConfig);
    },

    processDatefieldMonth: function(config) {
        var me = this;
        return Ext.apply(config, me.filterMonthConfig);
    },

    processButtonProcess: function(config) {
        var me = this;
        return Ext.apply(config, me.filterProcessConfig);
    },

    onCheckboxFilterChange: function(field, newValue, oldValue, eOpts) {
        field.next('#comboFilter').setDisabled(oldValue);
        field.next('#comboUnit').setDisabled(oldValue);
        this.setFiltered(newValue);
    },

    onComboFilterSelect: function(combo, records, eOpts) {
        var me = this;
        me.setFilter(records[0] && records[0].get('field1') );
    },

    onButtonClick: function(button, e, eOpts) {
        var comboUnit = this.down('#comboUnit'),
            comboTipeInternal = this.down('#comboTipeInternal'),
            comboFilter = this.down('#comboFilter'),
            datefieldDate = this.down('#datefieldDate'),
            textfieldYear = this.down('#textfieldYear'),
            datefieldBeforeDate = this.down('#datefieldBeforeDate'),
            datefieldAfterDate = this.down('#datefieldAfterDate'),
            containerDateRange = this.down('#containerDateRange'),
            datefieldStart = this.down('#datefieldStart'),
            datefieldEnd = this.down('#datefieldEnd'),
            datefieldMonth = this.down('#datefieldMonth');

        comboUnit.setValue(null);
        comboTipeInternal && comboTipeInternal.setValue(null);
        comboFilter.setValue(null);
        datefieldDate.setValue(null);
        datefieldMonth.setValue(null);
        datefieldBeforeDate.setValue(null);
        datefieldAfterDate.setValue(null);
        textfieldYear.setValue(null);
        datefieldStart.setValue(null);
        datefieldEnd.setValue(null);

        datefieldDate.hide();
        datefieldMonth.hide();
        datefieldBeforeDate.hide();
        datefieldAfterDate.hide();
        textfieldYear.hide();
        containerDateRange.hide();
    },

    onButtonProcessClick: function(button, e, eOpts) {
        this.fireEventArgs('process',[this,this.getFilter(), this.getValue(), e, eOpts]);
    },

    isFiltered: function() {
        return this.down('#checkboxFilter').getValue();
    },

    getFilter: function() {
        return this.down('#comboFilter').getValue();
    },

    setFilter: function(filter) {
        this.down('#comboFilter').setValue(filter);

        var me = this,
        	cmpDate = me.down('#datefieldDate'),
        	cmpBeforeDate = me.down('#datefieldBeforeDate'),
        	cmpAfterDate = me.down('#datefieldAfterDate'),
        	cmpDateRangeContainer = me.down('#containerDateRange'),
        	cmpYear = me.down('#textfieldYear'),
        	cmpMonth = me.down('#datefieldMonth'),
        	cmpProcess = me.down('#buttonProcess');

        cmpDate && cmpDate.hide();
        cmpBeforeDate && cmpBeforeDate.hide();
        cmpAfterDate && cmpAfterDate.hide();
        cmpDateRangeContainer && cmpDateRangeContainer.hide();
        cmpYear && cmpYear.hide();
        cmpMonth && cmpMonth.hide();

        // if(Ext.Array.contains(['date','beforedate','afterdate','daterange','month','year'], filter)){
        // 	cmpProcess.show();
        // }else{
        // 	cmpProcess.hide();
        // }
        switch(filter){
        	case 'date': cmpDate.show(); break;
        	case 'beforedate': cmpBeforeDate.show(); break;
        	case 'afterdate': cmpAfterDate.show(); break;
        	case 'daterange': cmpDateRangeContainer.show(); break;
        	case 'month': cmpMonth.show(); break;
        	case 'year': cmpYear.show(); break;
        }
    },

    setValue: function(value) {
        var me = this,
        	cmpFilter = me.down('#comboboxFilter'),
        	cmpDate = me.down('#datefieldDate'),
        	cmpBeforeDate = me.down('#datefieldBeforeDate'),
        	cmpAfterDate = me.down('#datefieldAfterDate'),
        	cmpDateRangeStart = me.down('#containerDateRange #datefieldStart'),
        	cmpDateRangeEnd = me.down('#containerDateRange #datefieldEnd'),
        	cmpYear = me.down('#textfieldYear'),
        	cmpMonth = me.down('#datefieldMonth');

        switch(me.getFilter()){
        	case 'date': return cmpDate.setValue(value);
        	case 'beforedate': return cmpBeforeDate.setValue(value);
        	case 'afterdate': return cmpAfterDate.setValue(value);
        	case 'daterange': value = Ext.Array.from(value); return [cmpDateRangeStart.setValue(value[0]), cmpDateRangeEnd.setValue(value[1])];
        	case 'month': return cmpMonth.setValue(value);
        	case 'year': return cmpYear.setValue(value);
        }
    },

    getValue: function() {
        var me = this,
        	cmpFilter = me.down('#comboboxFilter'),
        	cmpDate = me.down('#datefieldDate'),
        	cmpBeforeDate = me.down('#datefieldBeforeDate'),
        	cmpAfterDate = me.down('#datefieldAfterDate'),
        	cmpDateRangeStart = me.down('#containerDateRange #datefieldStart'),
        	cmpDateRangeEnd = me.down('#containerDateRange #datefieldEnd'),
        	cmpYear = me.down('#textfieldYear'),
        	cmpMonth = me.down('#datefieldMonth');

        switch(me.getFilter()){
        	case 'date': return Ext.util.Format.date(cmpDate.getValue(), cmpDate.submitFormat);
        	case 'beforedate': return Ext.util.Format.date(cmpBeforeDate.getValue(), cmpBeforeDate.submitFormat);
        	case 'afterdate': return Ext.util.Format.date(cmpAfterDate.getValue(), cmpAfterDate.submitFormat);
        	case 'daterange': return [Ext.util.Format.date(cmpDateRangeStart.getValue(), cmpDateRangeStart.submitFormat), Ext.util.Format.date(cmpDateRangeEnd.getValue(), cmpDateRangeEnd.submitFormat)];
        	case 'month': return Ext.util.Format.date(cmpMonth.getValue(), cmpMonth.submitFormat);
        	case 'year': return cmpYear.getValue();
        }
    },

    setFiltered: function(filtered) {
        if(!filtered){
            this.setFilter(null);
        }
    }

});