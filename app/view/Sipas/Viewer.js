/*
 * File: app/view/Sipas/Viewer.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SIPAS.view.Sipas.Viewer', {
    extend: 'Ext.window.Window',
    alias: 'widget.sipas_viewer',

    requires: [
        'SIPAS.view.Sipas.com.button.Refresh',
        'SIPAS.view.Sipas.com.button.Print',
        'SIPAS.view.Sipas.com.button.Download',
        'SIPAS.view.Sipas.com.button.Zoom',
        'SIPAS.view.Sipas.com.button.Zoomin',
        'SIPAS.view.Sipas.com.button.Zoomout',
        'SIPAS.view.Sipas.com.Iframe',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button'
    ],

    enableReload: true,
    enablePrint: true,
    useImageStyle: true,
    cls: 'sipas_viewer',
    layout: 'fit',
    title: '',

    initComponent: function() {
        var me = this;

        me.addEvents(
            'load',
            'print',
            'download',
            'zoom',
            'zoomin',
            'zoomout'
        );

        Ext.applyIf(me, {
            bodyStyle: {
                'background-color': '#ffffff'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    itemId: 'toolbarControl',
                    items: [
                        me.processButtonRefresh({
                            xtype: 'sipas_com_button_refresh',
                            listeners: {
                                click: {
                                    fn: me.onReload,
                                    scope: me
                                }
                            }
                        }),
                        me.processButtonPrint({
                            xtype: 'sipas_com_button_print',
                            listeners: {
                                click: {
                                    fn: me.onPrint,
                                    scope: me
                                }
                            }
                        }),
                        me.processButtonDownload({
                            xtype: 'sipas_com_button_download',
                            listeners: {
                                click: {
                                    fn: me.onDownload,
                                    scope: me
                                }
                            }
                        }),
                        me.processButtonZoom({
                            xtype: 'sipas_com_button_zoom',
                            listeners: {
                                click: {
                                    fn: me.onZoom,
                                    scope: me
                                }
                            }
                        }),
                        me.processButtonZoomin({
                            xtype: 'sipas_com_button_zoomin',
                            listeners: {
                                click: {
                                    fn: me.onZoomIn,
                                    scope: me
                                }
                            }
                        }),
                        me.processButtonZoomout({
                            xtype: 'sipas_com_button_zoomout',
                            listeners: {
                                click: {
                                    fn: me.onZoomOut,
                                    scope: me
                                }
                            }
                        })
                    ]
                }
            ],
            items: [
                {
                    xtype: 'sipas_com_iframe',
                    itemId: 'iframe'
                }
            ]
        });

        me.processSipasViewer(me);
        me.callParent(arguments);
    },

    processButtonRefresh: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableReload
        });
    },

    processButtonPrint: function(config) {
        return Ext.apply(config,{
            hidden: !this.enablePrint
        });
    },

    processButtonDownload: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableDownload
        });
    },

    processButtonZoom: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableZoom
        });
    },

    processButtonZoomin: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableZoom
        });
    },

    processButtonZoomout: function(config) {
        return Ext.apply(config,{
            hidden: !this.enableZoom
        });
    },

    processSipasViewer: function(config) {
        Ext.applyIf(config,{
            downloadUrl: config && config.url
        },{});
        return config;
    },

    onReload: function(button, e, eOpts) {
        this.reload();
    },

    onPrint: function(button, e, eOpts) {
        this.print();
    },

    onDownload: function(button, e, eOpts) {
        this.download();
    },

    onZoom: function(button, e, eOpts) {
        this.zoom();
    },

    onZoomIn: function(button, e, eOpts) {
        this.zoomIn();
    },

    onZoomOut: function(button, e, eOpts) {
        this.zoomOut();
    },

    getFrame: function() {
        return this.down('#iframe');
    },

    load: function(url, callback, scope) {
        if(!this.rendered) {
            this.url = url;
            return;
        }
        var me = this, frame = this.getFrame();
        frame.load(url, function(){
            this.fireEventArgs('load',[me]);
            me.afterLoad();
            Ext.callback(callback, scope, [me]);
        }, this);
        return this;
    },

    reload: function(callback, scope) {
        return this.load(this.url, callback, scope);
    },

    print: function() {
        this.getFrame().print();
        this.fireEvent('print',this);
    },

    download: function() {
        this.getFrame().getWindow().location.replace(this.downloadUrl);
        this.fireEvent('download',this,this.downloadUrl);
    },

    zoom: function(value) {
        this.getFrame().zoom(value);
        this.fireEvent('zoom', this, this.getFrame().zoomState);
    },

    zoomIn: function(increase) {
        this.getFrame().zoomIn(increase);
        this.fireEvent('zoomin', this, this.getFrame().zoomState);
    },

    zoomOut: function(decrease) {
        this.getFrame().zoomOut(decrease);
        this.fireEvent('zoomout', this, this.getFrame().zoomState);
    },

    afterLoad: function() {
        var d = this.getFrame().getDocument();
        var useImageStyle = this.useImageStyle;
        var style = d.getElementById("iframestyle") || (function(){
            var s = d.createElement('style');
            s.setAttribute('id','iframestyle');
        	s.type = "text/css";
        	s.innerHTML = useImageStyle ? [
                'html, body {',
                    'height: 100%;',
                    'width: 100%;',
                '}',
                'html {',
                     'display: table;',
                     'margin: auto;',
                '}',
                '@media screen{',
                    'body {',
                        'background-color: #ccc;',
                        'position: relative;',
                        'display: table-cell;',
                        'padding: 20px;',
                    '}',
                    'body > img,',
                    'body > .img,',
                    'body > .paper',
                    '{',
                        'margin: 0 auto;',
                        'top: 0;',
                        'right: 0;',
                        'bottom: 0;',
                        'left: 0;',
                        'padding-bottom: 20px;',
                        'padding-top: 20px;',
                        'padding-right: 5px;',
                        'padding-left: 10px;',
                        'box-shadow: 0 0 8px 1px rgba(0, 0, 0, 0.2);',
                        'background-color: white;',
                    '}',
                '}'
            ].join('') : [
                'html, body {',
                    'height: 100%;',
                    'width: 100%;',
                '}',
                'html {',
                     'display: table;',
                     'margin: auto;',
                '}'
            ].join('');
        	d.body.appendChild(s);
        	return s;
        })();
    }

});